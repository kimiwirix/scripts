ylim(0,1)+
labs(x="Time (hrs)",
y="Frequency",
color="Strain")+
scale_x_continuous(breaks = c(0, 24, 48)) +
theme_minimal()+
ggtitle(plot_title)+
theme(plot.title = element_text(hjust = 0.5))#centra titulo
temp_plot<-temp_plot+facet_grid(~exp)
plot_list[[id]] <- temp_plot
}
combined_plot <- plot_list[["NS2_4_28"]] + plot_list[["NS2_4_32"]] +
plot_annotation(title = paste("Community", community),
theme = theme(plot.title = element_text(hjust = 0.5)))
name<-paste("barplot", community, sep = '_')
assign(name,combined_plot)
#ggsave(combined_plot,filename=paste(name,".png", sep = "") , width = 30, height = 14, units = "cm")
}
R12_28_tpc<-table_per_community
R12_28_tpc_w<-table_per_community_whole
View(R12_28_tpc)
View(R12_28_tpc_w)
library(readODS)
library(stats)
library(FactoMineR)
library(factoextra)
write.table(melt_data, file = "output.tsv", sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
melt_data_numeric<-read_ods("~/LIIGH/16S analysis/graphs/output.ods", sheet = "modificado")
melt_data_numeric<-read_ods("~/LIIGH/16S analysis/graphs/output.ods", sheet = "modificado")
melt_data_numeric<-as.matrix(melt_data_numeric)
class(melt_data_numeric)<-"numeric"
melt_data_numeric
melt_new<-melt_data_numeric[,-1] #without label
PCA(melt_new)
pca_result <- prcomp(melt_new)
# Create a PCA biplot
fviz_pca_biplot(pca_result,
repel = TRUE,       # Avoid label overlap
col.var = "steelblue", # Color of variable arrows
col.ind = "black",  # Color of sample points
geom.ind = "point", # Shape of sample points
addEllipses = TRUE) # Add confidence ellipses (optional)
melt_data_numeric
?prcomp
melt_data_numeric<-read_ods("~/LIIGH/16S analysis/graphs/output.ods", sheet = "modificado")
melt_data_numeric
melt_data_numeric
melt_data_numeric %>% tidyr::pivot_wider(names_from = "strain", values_from = value)
tidyr::pivot_wider(melt_data_numeric, names_from = "strain", values_from = value)
temp <- tidyr::pivot_wider(melt_data_numeric, names_from = "strain", values_from = value)
temp <- temp[-(1:6)]
temp
colnames(temp) <- paste0("s", colnames(temp))
temp
plot(prcomp(temp))
biplot(prcomp(temp))
frequency_table<-read_ods(path = "~/LIIGH/16S analysis/feature-table-open-all.ods")
frequency_table<-read_ods(path = "~/LIIGH/16S analysis/total_abundance_table.ods")
frequency_table
t(frequency_table)
frequency_table<-read_ods(path = "~/LIIGH/16S analysis/total_abundance_table.ods")
proportion_table<-apply(frequency_table, 2, function(x) x/sum(x))
frequency_table<-read_ods(path = "~/LIIGH/16S analysis/total_abundance_table.ods")
frequency_table
proportion_table<-apply(frequency_table, 2, function(x) x/sum(x))
class(frequency_table)<-"numeric"
as.matrix(frequency_table)
frequency_table<-read_ods(path = "~/LIIGH/16S analysis/total_abundance_table.ods")
frequency_table
frequency_table<-as.matrix(frequency_table)
frequency_table
class(frequency_table)<-"numeric"
frequency_table<-read_ods("C:/Users/natal/Documents/LIIGH/16S analysis/total_abundance_table.ods")
frequency_table<-as.matrix(frequency_table)
colnames(frequency_table) <- ifelse(grepl("^N5", colnames(frequency_table)), sub("5", "S", colnames(frequency_table)), colnames(frequency_table)) #cambia el primer 5 a S de solo los que empiezan con N5
rownames(frequency_table)<-frequency_table[,1] #pone ids como rownames y los quita de la columna 1
frequency_table<- frequency_table[,-1]#quita primera columna de ids
class(frequency_table)<-"numeric"
frequency_table
proportion_table<-apply(frequency_table, 2, function(x) x/sum(x))
proportion_table
options(scipen=999)#quita scientific notation
proportion_table
colSums(proportion_table)
proportion_table
proportion_table<-t(proportion_table)#transpose
proportion_table
rowSums(proportion_table)
prcomp(proportion_table)
biplot(prcomp(proportion_table))
PCA(proportion_table)
pca<-prcomp(proportion_table, scale. = TRUE)
pca
pca
autoplot(pca)
ggplot2::autoplot(pca)
pca<-prcomp(proportion_table)
pca
biplot(pca)
proportion_table
proportion_table
proportion_table
proportion_table<-apply(frequency_table, 2, function(x) x/sum(x))
proportion_table
proportion_table<-t(proportion_table)#transpose
proportion_table
rowSums(proportion_table)
proportion_table
proportion_table<-apply(frequency_table, 2, function(x) x/sum(x))
proportion_table
proportion_table<-t(proportion_table)#transpose
proportion_table
NS1<-read_ods("C:/Users/natal/Documents/LIIGH/collection_sheet.ods", sheet="full")
NS1<-as.data.frame(NS1)
NS1<-NS1[c("community","hrs","temp","label","techrep","exp")]#solo deja el dataframe con esas columnas
NS1
NS1<-read_ods("C:/Users/natal/Documents/LIIGH/collection_sheet.ods", sheet="full")
NS1<-as.data.frame(NS1)
NS1<-NS1[c("community","hrs","temp","label","techrep","exp")]#solo deja el dataframe con esas columnas
NS2<-read_ods("C:/Users/natal/Documents/LIIGH/collection_sheet_NS2.ods", sheet="full")
NS2<-as.data.frame(NS2)
NS2<-NS2[c("community","hrs","temp","label","techrep","exp")]
NS3<-read_ods("C:/Users/natal/Documents/LIIGH/collection_sheet_NS3.ods", sheet="full")
NS3<-as.data.frame(NS3)
NS3<-NS3[c("community","hrs","temp","label","techrep","exp")]
NS4<-read_ods("C:/Users/natal/Documents/LIIGH/collection_sheet_NS4.ods", sheet="full")
NS4<-as.data.frame(NS4)
NS4<-NS4[c("community","hrs","temp","label","techrep","exp")]
NS<-rbind(NS1,NS3,NS2,NS4)
NS
NS<-rbind(NS1,NS3,NS2,NS4)
NS
View(NS)
metadata <- NS[NS$techrep == "A", ]
metadata
proportion_table
View(metadata)
metadata <- metadata[NS$hrs == c(0,24,48), ]
metadata
metadata <- metadata[NS$hrs == c("0","24","48"), ]
metadata
NS<-rbind(NS1,NS3,NS2,NS4)
NS
metadata <- NS[NS$techrep == "A", ]
metadata <- metadata[NS$hrs == 72, ]
metadata
NS<-rbind(NS1,NS3,NS2,NS4)
NS
metadata <- NS[NS$techrep == "A", ]
View(metadata)
proportion_metadata<-merge(proportion_table, metadata, by = "label")
proportion_table
metadata
rownames(proportion_table)
class(proportion_table)
cbind(RowNames = rownames(proportion_table), proportion_table)
cbind(RowNames = rownames(proportion_table), proportion_table)<-"Label"
proportion_table<-apply(frequency_table, 2, function(x) x/sum(x))
proportion_table
proportion_table<-t(proportion_table)#transpose
proportion_table
kk<-cbind(RowNames=rownames(proportion_table), proportion_table)
kk
kk<-cbind(Label=rownames(proportion_table), proportion_table)
kk
proportion_table<-cbind(Label=rownames(proportion_table), proportion_table)
proportion_table
proportion_metadata<-merge(proportion_table, metadata, by = "label")
proportion_table<-cbind(label=rownames(proportion_table), proportion_table)
proportion_metadata<-merge(proportion_table, metadata, by = "label")
proportion_metadata
proportion_metadata
proportion_table<-apply(frequency_table, 2, function(x) x/sum(x))
proportion_table
options(scipen=999)#quita scientific notation
proportion_table<-t(proportion_table)#transpose
proportion_table
NS<-rbind(NS1,NS3,NS2,NS4)
metadata <- NS[NS$techrep == "A", ]
proportion_table<-cbind(label=rownames(proportion_table), proportion_table)
proportion_metadata<-merge(proportion_table, metadata, by = "label")
proportion_metadata
proportion_metadata[2:9]
View(proportion_metadata)
proportion_metadata[2:11]
proportion_metadata[2:10]
pca <- prcomp(proportion_metadata[,c(1:4)])
pca <- prcomp(proportion_metadata[,c(2:10)])
pca <- prcomp(proportion_metadata[2:10)
pca <- prcomp(proportion_metadata[2:10])
proportion_metadata[2:10]
new<-proportion_metadata[2:10]
as.matrix(new)
class(new)<-"numeric"
class(new)<-"double"
class(new)<-"numeric"
pca <- prcomp(proportion_metadata[,c(2:10)])
proportion_metadata[,c(1:10)]
proportion_metadata[,c(2:10)]
pca <- prcomp(proportion_metadata[,c(2:10)])
pca <- prcomp(proportion_metadata[,c(2,3,4,5,6)])
class(proportion_metadata[,c(2:10)])<-"numeric"
class(proportion_metadata)
as.matrix(proportion_metadata)
class(proportion_metadata[,c(2:10)])<-"numeric"
proportion_metadata<-as.matrix(proportion_metadata)
class(proportion_metadata[,c(2:10)])<-"numeric"
proportion_metadata
pca <- prcomp(proportion_metadata[,c(2:10)])
proportion_metadata[, c(2:10)] <- apply(proportion_metadata[, c(2:10)], 2, as.numeric)
proportion_metadata
proportion_metadata[, c(2,3)] <- apply(proportion_metadata[, c(2,3)], 2, as.numeric)
proportion_metadata
proportion_metadata[, 2] <- apply(proportion_metadata[,2], 2, as.numeric)
proportion_metadata[, 2] <- apply(proportion_metadata[,2], 2, as.numeric)
proportion_metadata<-merge(proportion_table, metadata, by = "label")
proportion_metadata
class(proportion_metadata)
proportion_metadata[, 2] <- apply(proportion_metadata[,2], 2, as.numeric)
proportion_metadata[, 2:3] <- apply(proportion_metadata[,2:3], 2, as.numeric)
proportion_metadata
proportion_metadata[, 2:10] <- apply(proportion_metadata[,2:10], 2, as.numeric)
proportion_metadata
pca <- prcomp(proportion_metadata[,c(2:10)])
pca
biplot(pca)
summary(pca)
summary(pca)
install.packages("ggfortify")
library(ggfortify)
plot<-autoplot(pca, data = proportion_metadata, colour="exp")
plot
plot<-autoplot(pca, data = proportion_metadata, colours=c("exp", "strain"))
plot
plot<-autoplot(pca, data = proportion_metadata, colour="exp")
plot
proportion_metadata
plot<-autoplot(pca, data = proportion_metadata, colour="community")
plot
proportion_metadata<-merge(proportion_table, metadata, by = "label")
proportion_metadata
proportion_metadata<-merge(proportion_table, metadata, by = "label")
proportion_metadata[, 2:10] <- apply(proportion_metadata[,2:10], 2, as.numeric)
proportion_metadata
pca <- prcomp(proportion_metadata[,c(2:10)])
autoplot(pca,geom="tile")
autoplot(pca,geom="tile")
autoplot(pca,geom="tile", colour="exp")
plot<-autoplot(pca, data = proportion_metadata, colour="exp")
plot
plot<-autoplot(pca, data = proportion_metadata, colour="hrs")
plot
biplot(pca)
pca <- prcomp(proportion_metadata[,c(2:10)])
pca <- prcomp(proportion_metadata[,c(2:10)])
pca
autoplot(pca, data = proportion_metadata, colour="techrep")
autoplot(pca, data = proportion_metadata, colour="temp")
# Create a PCA biplot
fviz_pca_biplot(pca,
repel = TRUE,       # Avoid label overlap
col.var = "steelblue", # Color of variable arrows
col.ind = "black",  # Color of sample points
geom.ind = "point", # Shape of sample points
addEllipses = TRUE) # Add confidence ellipses (optional)
autoplot(pca, data = proportion_metadata, colour="exp")
proportion_metadata
proportion_metadata$group<-ifelse(proportion_metadata$exp %in% c("NS1", "NS3"), "Group1", "Group2")
proportion_metadata
View(proportion_metadata)
pca <- prcomp(proportion_metadata[,c(2:10)])
autoplot(pca, data = proportion_metadata, colour="group")
autoplot(pca, data = proportion_metadata, colour="group")
pca <- prcomp(proportion_metadata[,c(2:10)], scale. = TRUE)#solo hace pca de columnas con frequencies
autoplot(pca, data = proportion_metadata, colour="group")
pca <- prcomp(proportion_metadata[,c(2:10)])#solo hace pca de columnas con frequencies
autoplot(pca, data = proportion_metadata, colour="group")
library(readODS)
library(stats)
library(FactoMineR)
library(factoextra)
library(ggfortify)
frequency_table<-read_ods("C:/Users/natal/Documents/LIIGH/16S analysis/total_abundance_table.ods")
frequency_table<-as.matrix(frequency_table)
colnames(frequency_table) <- ifelse(grepl("^N5", colnames(frequency_table)), sub("5", "S", colnames(frequency_table)), colnames(frequency_table)) #cambia el primer 5 a S de solo los que empiezan con N5
rownames(frequency_table)<-frequency_table[,1] #pone ids como rownames y los quita de la columna 1
frequency_table<- frequency_table[,-1]#quita primera columna de ids
class(frequency_table)<-"numeric"
frequency_table
proportion_table<-apply(frequency_table, 2, function(x) x/sum(x))
proportion_table
options(scipen=999)#quita scientific notation
proportion_table<-t(proportion_table)#transpose
proportion_table
NS1<-read_ods("C:/Users/natal/Documents/LIIGH/collection_sheet.ods", sheet="full")
NS1<-as.data.frame(NS1)
NS1<-NS1[c("community","hrs","temp","label","techrep","exp")]#solo deja el dataframe con esas columnas
NS2<-read_ods("C:/Users/natal/Documents/LIIGH/collection_sheet_NS2.ods", sheet="full")
NS2<-as.data.frame(NS2)
NS2<-NS2[c("community","hrs","temp","label","techrep","exp")]
NS3<-read_ods("C:/Users/natal/Documents/LIIGH/collection_sheet_NS3.ods", sheet="full")
NS3<-as.data.frame(NS3)
NS3<-NS3[c("community","hrs","temp","label","techrep","exp")]
NS4<-read_ods("C:/Users/natal/Documents/LIIGH/collection_sheet_NS4.ods", sheet="full")
NS4<-as.data.frame(NS4)
NS4<-NS4[c("community","hrs","temp","label","techrep","exp")]
NS<-rbind(NS1,NS3,NS2,NS4)
metadata <- NS[NS$techrep == "A", ]
metadata
proportion_table<-cbind(label=rownames(proportion_table), proportion_table)
proportion_table
proportion_metadata<-merge(proportion_table, metadata, by = "label")
proportion_metadata[, 2:10] <- apply(proportion_metadata[,2:10], 2, as.numeric)
proportion_metadata
proportion_metadata$group<-ifelse(proportion_metadata$exp %in% c("NS1", "NS3"), "Group1", "Group2") #agrupa NS1 y NS3 en Group1 y NS2 y NS4 en group 2
pca <- prcomp(proportion_metadata[,c(2:10)])#solo hace pca de columnas con frequencies
autoplot(pca, data = proportion_metadata, colour="group")
t(proportion_metadata)
kk<-t(proportion_metadata)
View(kk)
proportion_metadata
install.packages("vegan")
proportion_table
proportion_metadata
proportion_metadata[2:10]
vegdist(proportion_metadata[2:10], method="bray")
library(vegan)
vegdist(proportion_metadata[2:10], method="bray")
kk<-vegdist(proportion_metadata[2:10], method="bray")
kk
proportion_metadata
#Bray curtis PCoA
matrix_before_bray<-proportion_metadata[1:10]
matrix_before_bray<-rownames(proportion_metadata[,1])
matrix_before_bray
#Bray curtis PCoA
matrix_before_bray<-proportion_metadata[1:10]
matrix_before_bray
#Bray curtis PCoA
matrix_before_bray<-proportion_metadata[2:10]
rownames(matrix_before_bray)<-proportion_metadata[,1]
matrix_before_bray
matrix_after_bray<-vegdist(matrix_before_bray, method = "bray")
matrix_after_bray
pcoa<-cmdscale(matrix_after_bray)
pcoa<-cmdscale(matrix_after_bray, K=2)
pcoa<-cmdscale(matrix_after_bray, k=2)
coordinates <- as.data.frame(pcoa_result$points)
pcoa
coordinates <- as.data.frame(pcoa$points)
pcoa<-cmdscale(matrix_after_bray,eig=TRUE, k=2)
coordinates <- as.data.frame(pcoa$points)
colnames(coordinates) <- c("PCoA1", "PCoA2")
coordinates$Sample <- rownames(coordinates)
# Plot
plot(
coordinates$PCoA1, coordinates$PCoA2,
xlab = "PCoA1", ylab = "PCoA2",
main = "PCoA based on Bray-Curtis Dissimilarity",
pch = 19, col = "blue"
)
text(coordinates$PCoA1, coordinates$PCoA2, labels = coordinates$Sample, pos = 4)
# Plot
plot(
coordinates$PCoA1, coordinates$PCoA2,
xlab = "PCoA1", ylab = "PCoA2",
main = "PCoA based on Bray-Curtis Dissimilarity",
pch = 19, col = "blue"
)
#Bray curtis PCoA
matrix_before_bray<-proportion_metadata[2:10]
matrix_before_bray
rownames(matrix_before_bray)<-proportion_metadata[,1]
matrix_before_bray
matrix_bray<-vegdist(matrix_before_bray, method = "bray")
as.matrix(matrix_bray)
kk<-as.matrix(matrix_bray)
View(kk)
install.packages("ape")
library(ape)
pcoa<-pcoa(matrix_bray)
pcoa
pcoa_df <- as.data.frame(pcoa$vectors)
rownames(pcoa_df) <- rownames(matrix_before_bray)
# Plot with autoplot (requires a PCA-like input structure, so conversion may be needed)
autoplot(prcomp(pcoa_df), label = TRUE, label.size = 3)
install.packages("phyloseq")
library(phyloseq)
#Bray curtis PCoA
matrix_for_bray<-proportion_metadata[2:10]
rownames(matrix_for_bray)<-proportion_metadata[,1]
matrix_bray<-vegdist(matrix_for_bray, method = "bray")
pcoa<-pcoa(matrix_bray)
pcoa
pcoa
matrix_bray
prcomp(matrix_bray)
new<-prcomp(matrix_bray)
autoplot(new, data = proportion_metadata, colour="group")
#PCA
proportion_metadata$group<-ifelse(proportion_metadata$exp %in% c("NS1", "NS3"), "Group1", "Group2") #agrupa NS1 y NS3 en Group1 y NS2 y NS4 en group 2
pca <- prcomp(proportion_metadata[,c(2:10)])#solo hace pca de columnas con frequencies
proportion_metadata
autoplot(pca, data = proportion_metadata, colour="temp")
autoplot(pca, data = proportion_metadata, colour="hrs")
matrix_bray<-vegdist(matrix_for_bray, method = "exp")
autoplot(pca, data = proportion_metadata, colour="exp")
autoplot(pca, data = proportion_metadata, colour="community")
autoplot(pca, data = proportion_metadata, colour="group")
library(readODS)
library(reshape2)
library(ggplot2)
library(patchwork)
library(remotes)
library(sjstats)
library(dplyr)
library(tibble)
#cambiar dependiendo el archivo
frequency_table<-read_ods("C:/Users/natal/Documents/LIIGH/16S analysis/total_abundance_table.ods")
frequency_table<-frequency_table %>%
column_to_rownames(var="RowName") %>%
as.matrix()
colnames(frequency_table) <- ifelse(grepl("^N5", colnames(frequency_table)), sub("5", "S", colnames(frequency_table)), colnames(frequency_table)) #cambia el primer 5 a S de solo los que empiezan con N5
proportion_table<-apply(frequency_table, 2, function(x) x/sum(x))
proportion_table<-proportion_table %>%
t() %>%
as.data.frame()
proportion_table$label<-rownames(proportion_table) #pone como primera columna los rownames para mergear con las otras tablas
#metadata
NS1<-read_ods("C:/Users/natal/Documents/LIIGH/collection_sheet.ods", sheet="full")
NS1<-as.data.frame(NS1)
NS1<-NS1[c("community","hrs","temp","label","techrep","exp")]#solo deja el dataframe con esas columnas
NS2<-read_ods("C:/Users/natal/Documents/LIIGH/collection_sheet_NS2.ods", sheet="full")
NS2<-as.data.frame(NS2)
NS2<-NS2[c("community","hrs","temp","label","techrep","exp")]
NS3<-read_ods("C:/Users/natal/Documents/LIIGH/collection_sheet_NS3.ods", sheet="full")
NS3<-as.data.frame(NS3)
NS3<-NS3[c("community","hrs","temp","label","techrep","exp")]
NS4<-read_ods("C:/Users/natal/Documents/LIIGH/collection_sheet_NS4.ods", sheet="full")
NS4<-as.data.frame(NS4)
NS4<-NS4[c("community","hrs","temp","label","techrep","exp")]
NS<-rbind(NS1,NS3,NS2,NS4)
metadata <- NS[NS$techrep == "A", ]
proportion_metadata<-merge(proportion_table, metadata, by = "label") #mergea metadata con proportion table por el label name
proportion_metadata
strains<-c("ST00042","ST00046","ST00060","ST00094","ST00101","ST00109", "ST00143","ST00154","ST00164")
communities<-c("R1","R2","R3","R4","R5","R6","R7","R8","R9","R10","R11","R12")
custom_colors <- c("ST00046" = "#25383C", "ST00154" = "#08519C", "ST00101" = "#00E5EE","ST00109" = "#4682B4", "ST00042" = "#BDD7E7",
"ST00143" = "#8B2323", "ST00164" = "#CD2626", "ST00094" = "#FF3030","ST00110" = "#EE6A50", "ST00060" = "#FCAE91")
options(scipen=999)#quita scientific notation
all_tables_filtered<-data.frame()
#for que filtra las cepas que van en cada comsint y las agupa en una df general (all_tables_filtered)
for (comsint in communities){ #loop de cada comunidad por cada temperatura
table_per_community<-proportion_metadata[proportion_metadata$community==comsint,] #hace una tabla de cada comunidad R
table_per_community_ST<-table_per_community[,grepl("ST", names(table_per_community)) | names(table_per_community)=="hrs"] #solo deja columnas de frecuencias ST y columna de hrs
#en nuevo df _filtered pone columnas de df anterior que colsums sea mayor a 0.001 y que en las row de horas, en la hora 0 las colsums sea mayor que 0.001
#a veces aparece numero en row pero son porcentajes muy muy bajos
table_per_community_filtered<-table_per_community_ST[,which((colSums(table_per_community_ST)>0.001) &
(colSums(table_per_community_ST[table_per_community_ST$hrs==0,]>0.001)))]
table_per_community_whole <- cbind(table_per_community_filtered, table_per_community[, c("community", "hrs", "temp","techrep","exp", "label")])
melt_data <- melt(table_per_community_whole, id = c('label', 'hrs', 'community','techrep','temp','exp'), variable.name = 'strain')#reorganiza tabla por strains
all_tables_filtered<-rbind(all_tables_filtered, melt_data) #df con info filtrada: cada cepa aparece en la comsint que debe aparecer
}
avg_per_comm_strain <- all_tables_filtered %>%   #de la tabla por strain quita temps de día 0, y agrupa por comunidad y temp los values y saca el promedio de values por cada temp en cada community
filter(temp != "NA") %>%
group_by(strain ,community , temp) %>%
summarise(mean_value = mean(value, na.rm = TRUE), .groups = "drop")
strains_blue<-avg_per_comm_strain %>%   #de la tabla por strain quita temps de día 0, y agrupa por comunidad y temp los values y saca el promedio de values por cada temp en cada community
filter(strain %in% c("ST00046", "ST00154", "ST00101","ST00109" , "ST00042"))
strains_red<-avg_per_comm_strain %>%   #de la tabla por strain quita temps de día 0, y agrupa por comunidad y temp los values y saca el promedio de values por cada temp en cada community
filter(strain %in% c("ST00143", "ST00164", "ST00094","ST00110" , "ST00060"))
plot_blue<-ggplot(data = strains_blue, aes(x = factor(community, level=communities), y=mean_value)) +
geom_bar(stat = "identity", aes(fill = strain))+#, position = "fill") +
labs(title = "Strains in communities",
y = "Total Abundance", x = "Community") +
theme_minimal()+
facet_wrap(~ strain + temp, axes = "all_x")+
scale_fill_manual(values=custom_colors)+
#ylim(0,5)+
theme(legend.position = "none",
axis.text.x = element_text(angle = 45, hjust = 1),  # Tilt x-axis labels for better readability
axis.title.x = element_text(size = 12),  # Customize x-axis title
strip.text = element_text(size = 10),  # Customize facet labels
panel.spacing = unit(1, "lines")  # Add space between facets to avoid overlaps
)
plot_red<-ggplot(data = strains_red, aes(x = factor(community, level=communities), y=mean_value)) +
geom_bar(stat = "identity", aes(fill = strain))+#, position = "fill") +
labs(title = "Strains in communities",
y = "Total Abundance", x = "Community") +
theme_minimal()+
facet_wrap(~ strain + temp, axes = "all_x")+
scale_fill_manual(values = custom_colors)+
#ylim(0,5)+
theme(legend.position = "none",
axis.text.x = element_text(angle = 45, hjust = 1),  # Tilt x-axis labels for better readability
axis.title.x = element_text(size = 12),  # Customize x-axis title
strip.text = element_text(size = 10),  # Customize facet labels
panel.spacing = unit(1, "lines")  # Add space between facets to avoid overlaps
)
plot_blue
plot_red
getwd()
setwd("LIIGH/16S analysis/scripts/")
ggsave(plot_blue,filename=paste(plot_blue,".png", sep = "") , width = 30, height = 14, units = "cm")
ggsave(plot_blue,filename=paste(plot_blue,".png", sep = ""))# , width = 30, height = 14, units = "cm")
library(ggplot2)
ggsave(filename = "plot_blue", plot = plot_blue)
ggsave(filename = "plot_blue.png", plot = plot_blue)
plot_blue
ggsave(filename = "plot_blue.png", plot = plot_blue, bg="white")
ggsave(filename = "plot_blue.png", plot = plot_blue, bg="white", width = 30, height = 14, units = "cm")
ggsave(filename = "plot_red.png", plot = plot_red, bg="white", width = 30, height = 14, units = "cm")
